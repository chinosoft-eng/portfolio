---
import CornerClipIcon from "../ui/icons/CornerClipIcon.astro";
import ArrowUpIcon from "../ui/icons/ArrowUpIcon.astro";
import ArrowLeftIcon from "../ui/icons/ArrowLeftIcon.astro";
import ArrowDownIcon from "../ui/icons/ArrowDownIcon.astro";
import ArrowRightIcon from "../ui/icons/ArrowRightIcon.astro";
---
<div class="glass-card hidden lg:block" id="snake-game-card">
  <div class="corner top-left">
      <CornerClipIcon />
  </div>
  <div class="corner top-right">
      <CornerClipIcon />
  </div>
  <div class="corner bottom-left">
      <CornerClipIcon />
  </div>
  <div class="corner bottom-right">
      <CornerClipIcon />
  </div>
  <div class="m-[30px] w-[440px] h-[410px] flex justify-between">
    <div
      class="bg-slate-800 w-[250px] h-[410px] rounded-lg inset-shadow-xs inset-shadow-[#02121B71] relative"
    >
      <div id="snake-game-board" class="w-[250px] h-[410px] relative">
        <div class="snake-part snake-head absolute top-[170px] left-[100px]">
        </div>
        <div class="snake-part absolute top-[180px] left-[100px]"></div>
        <div class="snake-part absolute top-[190px] left-[100px]"></div>
        <div class="snake-part absolute top-[200px] left-[100px]"></div>
        <div class="snake-part absolute top-[210px] left-[100px]"></div>
        <div class="snake-part absolute top-[220px] left-[100px]"></div>
        <div class="snake-part absolute top-[220px] left-[110px]"></div>
        <div class="snake-part absolute top-[220px] left-[120px]"></div>
        <div class="snake-part absolute top-[220px] left-[130px]"></div>
        <div class="snake-part absolute top-[220px] left-[140px]"></div>
        <div class="snake-part absolute top-[230px] left-[140px]"></div>
        <div class="snake-part fade4 absolute top-[240px] left-[140px]"></div>
        <div class="snake-part fade3 absolute top-[250px] left-[140px]"></div>
        <div class="snake-part fade2 absolute top-[260px] left-[140px]"></div>
        <div class="snake-part fade1 absolute top-[270px] left-[140px]"></div>
        <div id="game-food" class="top-[140px] left-[100px]"></div>
      </div>
      <div
        id="win-banner"
        class="absolute left-0 right-0 bottom-5 flex-col items-center gap-2 hidden"
      >
        <div class="w-full py-4 bg-[#01162784]">
          <p class="text-teal-400 text-2xl text-center">YOU WIN ðŸŽ‰</p>
        </div>

        <button
          class="text-sm text-foreground hover:text-heading-foreground cursor-pointer"
          id="win-play-again"
        >
          Play again
        </button>
        <button
          class="text-sm text-foreground hover:text-heading-foreground cursor-pointer"
          id="win-continue"
        >
          Continue
        </button>
      </div>
      <div
        id="loose-banner"
        class="absolute left-0 right-0 bottom-8 flex flex-col items-center gap-2 hidden"
      >
        <div class="w-full py-4 bg-[#01162784]">
          <p class="text-teal-400 text-2xl text-center">GAME OVER!</p>
        </div>

        <button
          class="text-sm text-foreground hover:text-heading-foreground cursor-pointer"
          id="loose-play-again"
        >
          Try again
        </button>

      </div>
      <button
        id="start-snake-game"
        class="rounded absolute bg-primary text-[#020618] p-2 bottom-8 left-20"
        >
          Start Game!
      </button>
    </div>
    <div class="w-[170px] flex flex-col gap-2 h-full">
      <div class="bg-slate-800 p-2 rounded-lg">
        <p class="text-slate-50 text-sm">// use keyboard</p>
        <p class="text-slate-50 text-sm">// arrows to play</p>
        <div class="grid grid-cols-3 grid-rows-2 mt-4 gap-1">
          <div></div>
          <div
            id="up-key"
            class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center py-1"
          >
              <ArrowUpIcon />
          </div>
          <div></div>
          <div
            id="left-key"
            class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center"
          >
              <ArrowLeftIcon />
          </div>
          <div
            id="down-key"
            class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center"
          >
              <ArrowDownIcon />
          </div>
          <div
            id="right-key"
            class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center"
          >
              <ArrowRightIcon />
          </div>
        </div>
      </div>
      <div class="p-1 flex-1 h-full">
        <p>// food left</p>
        <div id="remaining-food" class="mt-2 grid grid-cols-6 gap-4">
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
          <div class="food-element"></div>
        </div>
      </div>
      <div class="flex justify-end">
        <button
          id="skip-snake-game"
          class="bg-transparent px-3 py-2 text-heading-foreground border border-heading-foreground rounded-lg cursor-pointer"
        >
          Skip
        </button>
      </div>
    </div>
  </div>
</div>

<script>

  class SnakeGame {
    gameBoard: HTMLElement | null;
    snake: { x: number; y: number }[];
    food: { x: number; y: number };
    direction: "up" | "down" | "left" | "right";
    gameStatus: "waitingForStart" | "playing" | "gameOver" | "Won";
    gameInterval: any;
    totalFood: number;
    reaminingFood: number;

    onGameWin?: () => void;
    onGameLoose?: () => void;

    constructor() {
      this.gameBoard = document.getElementById("snake-game-board");
      this.snake = [{ x: 12, y: 20 }];
      this.food = { x: 5, y: 5 };
      this.direction = "right";
      this.gameStatus = "waitingForStart";
      this.reaminingFood = Math.floor(Math.random() * (25 - 10 + 1) + 10);
      this.totalFood = this.reaminingFood;
      this.drawRemainingFood();
    }

    /**
     * Reset the game
     */
    resetGame() {
      this.snake = [{ x: 10, y: 10 }];
      this.food = { x: 5, y: 5 };
      this.direction = "right";
      this.gameStatus = "waitingForStart";
      this.reaminingFood = Math.floor(Math.random() * (25 - 10 + 1) + 10);
      this.totalFood = this.reaminingFood;
      this.drawRemainingFood();
    }

    /**
     * Draw the remaining foods on the food panel
     */
    private drawRemainingFood() {
      const foodContainer = document.getElementById("remaining-food");

      if (!foodContainer) return;

      foodContainer.innerHTML = "";

      for (let i = 0; i < this.reaminingFood; i++) {
        const food = document.createElement("div");
        food.classList.add("food-element");
        foodContainer?.appendChild(food);
      }

      for (let i = this.reaminingFood; i < this.totalFood; i++) {
        const food = document.createElement("div");
        food.classList.add("food-element-eaten");
        foodContainer?.appendChild(food);
      }
    }

    /**
     * Set the necesary styles for the header of the snake
     */
    private setStyleToHeaderSnakePart(snakePart: HTMLDivElement) {
      switch (this.direction) {
        case "up":
          snakePart.style.borderRadius = "40% 40% 0 0";
          break;
        case "down":
          snakePart.style.borderRadius = "0 0 40% 40%";
          break;
        case "left":
          snakePart.style.borderRadius = "40% 0 0 40%";
          break;
        case "right":
          snakePart.style.borderRadius = "0 40% 40% 0";
          break;
      }
    }

    /**
     * Add styles of a part of the snake's body
     * @param snakePart The snake part to add the styles
     * @param partPosition The position of the part
     */
    private setStyleToBodySnakePart(
      snakePart: HTMLDivElement,
      partPosition: number,
    ) {
      const numberOfFades = 4;

      if (this.snake.length > 0) {
        const currentFadeNumber = Math.abs(this.snake.length - partPosition);
        if (currentFadeNumber > 0 && currentFadeNumber <= numberOfFades)
          snakePart.classList.add(`fade${currentFadeNumber}`);
      }
    }

    /**
     * Draw the game board
     */
    updateGameBoard() {
      if (!this.gameBoard) return;

      this.gameBoard!.innerHTML = ""; // Clear the previous frame
      // Draw the snake
      for (let i = 0; i < this.snake.length; i++) {
        const snakePart = document.createElement("div");
        snakePart.classList.add("snake-part");

        // Add style to snake header
        if (i === 0 && this.snake.length > 1) {
          this.setStyleToHeaderSnakePart(snakePart);
        }

        // Add style to snake body
        this.setStyleToBodySnakePart(snakePart, i);

        snakePart.style.left = this.snake[i].x * 10 + "px";
        snakePart.style.top = this.snake[i].y * 10 + "px";
        this.gameBoard.appendChild(snakePart);
      }

      // Draw the food
      const foodElement = document.createElement("div");
      foodElement.id = "game-food";
      foodElement.style.left = this.food.x * 10 + "px";
      foodElement.style.top = this.food.y * 10 + "px";
      this.gameBoard.appendChild(foodElement);
    }

    /**
     * Move the snake
     */
    moveSnake() {
      const newHead = { x: this.snake[0].x, y: this.snake[0].y };

      // Update the position of the new head based on the current direction
      switch (this.direction) {
        case "up":
          newHead.y -= 1;
          break;
        case "down":
          newHead.y += 1;
          break;
        case "left":
          newHead.x -= 1;
          break;
        case "right":
          newHead.x += 1;
          break;
      }

      this.snake.unshift(newHead); // Add the new head to the front

      // Check if the snake ate the food
      if (newHead.x === this.food.x && newHead.y === this.food.y) {
        // Generetat new food at random position
        this.food = {
          x: Math.floor(Math.random() * (23 - 1 + 1) + 1),
          y: Math.floor(Math.random() * (39 - 1 + 1) + 1),
        };
        this.reaminingFood -= 1;
        this.drawRemainingFood();
      } else {
        // Snake didn't eat the food, so remove the tail
        this.snake.pop();
      }
    }

    // Check if the game is over
    checkGameOver() {
      const head = this.snake[0];

      // Check if the user already eat all food
      if (this.reaminingFood === 0) {
        clearInterval(this.gameInterval);
        this.gameStatus = "Won";

        if (this.onGameWin) this.onGameWin();
      }

      //Check the collision with walls
      if (head.x <= 0 || head.y <= 0 || head.x >= 24 || head.y >= 40) {
        clearInterval(this.gameInterval);
        this.gameStatus = "gameOver";

        if (this.onGameLoose) this.onGameLoose();
      }

      // Check for collision with itself
      for (let i = 1; i < this.snake.length; i++) {
        if (this.snake[i].x == head.x && this.snake[i].y === head.y) {
          clearInterval(this.gameInterval);
          this.gameStatus = "gameOver";

          if (this.onGameLoose) this.onGameLoose();
        }
      }
    }

    handleKeyPress(direction: "up" | "down" | "left" | "right") {
      const topKeyItem = document.getElementById("up-key");
      const leftKeyItem = document.getElementById("left-key");
      const rightKeyItem = document.getElementById("right-key");
      const downKeyItem = document.getElementById("down-key");

      switch (direction) {
        case "up":
          topKeyItem?.classList.remove("bg-[#0A0A0A]");
          topKeyItem?.classList.add("bg-stroke");
          setTimeout(() => {
            topKeyItem?.classList.remove("bg-stroke");
            topKeyItem?.classList.add("bg-[#0A0A0A]");
          }, 200);
          break;
        case "down":
          downKeyItem?.classList.remove("bg-[#0A0A0A]");
          downKeyItem?.classList.add("bg-stroke");
          setTimeout(() => {
            downKeyItem?.classList.remove("bg-stroke");
            downKeyItem?.classList.add("bg-[#0A0A0A]");
          }, 200);
          break;
        case "left":
          leftKeyItem?.classList.remove("bg-[#0A0A0A]");
          leftKeyItem?.classList.add("bg-stroke");
          setTimeout(() => {
            leftKeyItem?.classList.remove("bg-stroke");
            leftKeyItem?.classList.add("bg-[#0A0A0A]");
          }, 200);
          break;
        case "right":
          rightKeyItem?.classList.remove("bg-[#0A0A0A]");
          rightKeyItem?.classList.add("bg-stroke");
          setTimeout(() => {
            rightKeyItem?.classList.remove("bg-stroke");
            rightKeyItem?.classList.add("bg-[#0A0A0A]");
          }, 200);
          break;
      }

      this.direction = direction;
    }

    startGame(onGameLoose: () => void, onGameWin: () => void) {
      this.onGameLoose = onGameLoose;
      this.onGameWin = onGameWin;
      this.resetGame();

      this.gameInterval = setInterval(() => {
        this.moveSnake();
        this.checkGameOver();
        this.updateGameBoard();
      }, 200);
    }
  }

  const snakeGame = new SnakeGame();
  const startButton = document.getElementById("start-snake-game");
  const winPlayAgainButton = document.getElementById("win-play-again");
  const winContinueButton = document.getElementById("win-continue");
  const loosePlayAgainButton = document.getElementById("loose-play-again");
  const skipSnakeGameButton = document.getElementById("skip-snake-game");

  const onGameWin = () => {
    const winElement = document.getElementById("win-banner");
    winElement?.classList.remove("hidden");
  };

  const onGameLoose = () => {
    const looseElement = document.getElementById("loose-banner");
    looseElement?.classList.remove("hidden");
  }

  // Listenner for the start button
  startButton?.addEventListener("click", () => {
    snakeGame.startGame(onGameLoose, onGameWin);
    startButton.style.display = "none";

    document.addEventListener("keydown", (event) => {
      let moveDirection = "up";
      switch (event.key) {
        case "ArrowUp":
          moveDirection = "up";
          break;
        case "ArrowDown":
          moveDirection = "down";
          break;
        case "ArrowLeft":
          moveDirection = "left";
          break;
        case "ArrowRight":
          moveDirection = "right";
          break;
      }

      snakeGame.handleKeyPress(moveDirection as any);
    });
  });

  // Listenner for the winner play again button
  winPlayAgainButton?.addEventListener("click", () => {
    const winElement = document.getElementById("win-banner");
    winElement?.classList.add("hidden");

    snakeGame.startGame(onGameLoose, onGameWin);
  });

  // Listenner for the winner play again button
  loosePlayAgainButton?.addEventListener("click", () => {
    const looseElement = document.getElementById("loose-banner");
    looseElement?.classList.add("hidden");

    snakeGame.startGame(onGameLoose, onGameWin);
  });

  // Hidde the snake hame and show the code snipets carousel
  const onShowNextContent = () => {
    const snakeCartContainer = document.getElementById("snake-game-card");
    snakeCartContainer?.classList.add("hidden");
    snakeCartContainer?.classList.add("lg:hidden");

    const codeSnipetsCarouselContainer = document.getElementById("code-snipets-carousel");
    codeSnipetsCarouselContainer?.classList.remove("hidden");
  }

  // Listenner for skip snake game
  skipSnakeGameButton?.addEventListener("click", onShowNextContent);

  // Listenner for win snake game continue button
  winContinueButton?.addEventListener("click", onShowNextContent);


</script>

<style>
  .glass-card {
    position: relative;
    width: 500px;
    min-width: 500px;
    height: 470px;
    border-radius: 8px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.37);
    backdrop-filter: blur(100px);
    -webkit-backdrop-filter: blur(100px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    overflow: hidden;
    /* Glass background with gradient fill */
    background: linear-gradient(
        159deg,
        rgba(23, 85, 83, 0.5),
        rgba(67, 217, 173, 0.1)
      ),
      rgba(255, 255, 255, 0.05);
  }

  .corner {
    fill: var(--color-foreground);
    position: absolute;
    width: 10px;
    height: 10px;
    background: rgba(0, 255, 255, 0.2);
    border-radius: 50%;
    box-shadow: 0 0 4px 1px rgba(0, 255, 255, 0.1);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .top-left {
    top: 10px;
    left: 10px;
  }

  .top-right {
    top: 10px;
    right: 10px;
  }

  .bottom-left {
    bottom: 10px;
    left: 10px;
  }

  .bottom-right {
    bottom: 10px;
    right: 10px;
  }
</style>

<style is:global>
  .snake-head {
    border-radius: 40% 40% 0 0;
  }

  .snake-part {
    width: 10px;
    height: 10px;
    background-color: #46ecd599;
    position: absolute;
    filter: blur(0.3px);
  }

  #game-food {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    box-shadow: #46ecd5;
    background-color: #46ecd5;
    box-shadow: 0 0 8px 2px #46ecd550;
  }

  .food-element {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    box-shadow: #46ecd5;
    background-color: #46ecd590;
    box-shadow: 0 0 12px 3px #46ecd540;
  }

  .food-element-eaten {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    box-shadow: #46ecd5;
    background-color: #46ecd550;
    opacity: 0.5;
  }

  .fade4 {
    background-color: #46ecd595;
    opacity: 0.95;
    filter: blur(0.3px);
  }

  .fade3 {
    background-color: #46ecd590;
    opacity: 0.9;
    filter: blur(0.3px);
  }

  .fade2 {
    background-color: #46ecd585;
    opacity: 0.85;
    filter: blur(0.3px);
  }

  .fade1 {
    background-color: #46ecd580;
    opacity: 0.8;
    filter: blur(0.3px);
  }
</style>
