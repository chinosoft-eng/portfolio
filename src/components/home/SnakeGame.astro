<div class="glass-card">
    <div class="corner top-left">
        <svg
            width="10"
            height="10"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
        >
            <g clip-path="url(#clip0_26505_1089)">
                <path
                    d="M12 10.586L16.95 5.63599L18.364 7.04999L13.414 12L18.364 16.95L16.95 18.364L12 13.414L7.04999 18.364L5.63599 16.95L10.586 12L5.63599 7.04999L7.04999 5.63599L12 10.586Z"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_26505_1089">
                    <rect width="24" height="24" fill="white"></rect>
                </clipPath>
            </defs>
        </svg>
    </div>
    <div class="corner top-right">
        <svg
            width="10"
            height="10"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
        >
            <g clip-path="url(#clip0_26505_1089)">
                <path
                    d="M12 10.586L16.95 5.63599L18.364 7.04999L13.414 12L18.364 16.95L16.95 18.364L12 13.414L7.04999 18.364L5.63599 16.95L10.586 12L5.63599 7.04999L7.04999 5.63599L12 10.586Z"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_26505_1089">
                    <rect width="24" height="24" fill="white"></rect>
                </clipPath>
            </defs>
        </svg>
    </div>
    <div class="corner bottom-left">
        <svg
            width="10"
            height="10"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
        >
            <g clip-path="url(#clip0_26505_1089)">
                <path
                    d="M12 10.586L16.95 5.63599L18.364 7.04999L13.414 12L18.364 16.95L16.95 18.364L12 13.414L7.04999 18.364L5.63599 16.95L10.586 12L5.63599 7.04999L7.04999 5.63599L12 10.586Z"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_26505_1089">
                    <rect width="24" height="24" fill="white"></rect>
                </clipPath>
            </defs>
        </svg>
    </div>
    <div class="corner bottom-right">
        <svg
            width="10"
            height="10"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
        >
            <g clip-path="url(#clip0_26505_1089)">
                <path
                    d="M12 10.586L16.95 5.63599L18.364 7.04999L13.414 12L18.364 16.95L16.95 18.364L12 13.414L7.04999 18.364L5.63599 16.95L10.586 12L5.63599 7.04999L7.04999 5.63599L12 10.586Z"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_26505_1089">
                    <rect width="24" height="24" fill="white"></rect>
                </clipPath>
            </defs>
        </svg>
    </div>
    <div class="m-[30px] w-[440px] h-[410px] flex justify-between">
        <div
            class="bg-slate-800 w-[250px] h-[410px] rounded-lg inset-shadow-xs inset-shadow-[#02121B71] relative"
            id="snake-game-board"
        >
            <div
                class="snake-part snake-head absolute top-[170px] left-[100px]"
            >
            </div>
            <div class="snake-part absolute top-[180px] left-[100px]"></div>
            <div class="snake-part absolute top-[190px] left-[100px]"></div>
            <div class="snake-part absolute top-[200px] left-[100px]"></div>
            <div class="snake-part absolute top-[210px] left-[100px]"></div>
            <div class="snake-part absolute top-[220px] left-[100px]"></div>
            <div class="snake-part absolute top-[220px] left-[110px]"></div>
            <div class="snake-part absolute top-[220px] left-[120px]"></div>
            <div class="snake-part absolute top-[220px] left-[130px]"></div>
            <div class="snake-part absolute top-[220px] left-[140px]"></div>
            <div class="snake-part absolute top-[230px] left-[140px]"></div>
            <div class="snake-part fade4 absolute top-[240px] left-[140px]">
            </div>
            <div class="snake-part fade3 absolute top-[250px] left-[140px]">
            </div>
            <div class="snake-part fade2 absolute top-[260px] left-[140px]">
            </div>
            <div class="snake-part fade1 absolute top-[270px] left-[140px]">
            </div>
            <div id="game-food" class="top-[140px] left-[100px]"></div>
            <button
                id="start-snake-game"
                class="rounded absolute bg-primary text-heading-foreground p-2 bottom-8 left-20"
                >Start Game!</button
            >
        </div>
        <div class="w-[170px] flex flex-col gap-2">
            <div class="bg-slate-800 p-2 rounded-lg">
                <p class="text-slate-50 text-sm">// use keyboard</p>
                <p class="text-slate-50 text-sm">// arrows to play</p>
                <div class="grid grid-cols-3 grid-rows-2 mt-4 gap-1">
                    <div></div>
                    <div
                        class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center py-1"
                    >
                        <svg
                            width="19"
                            height="19"
                            viewBox="0 0 19 19"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M9.34558 6.33997L13.8456 10.84L4.84558 10.84L9.34558 6.33997Z"
                                fill="#F8FAFC"></path>
                        </svg>
                    </div>
                    <div></div>
                    <div
                        class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center"
                    >
                        <svg
                            width="19"
                            height="19"
                            viewBox="0 0 19 19"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <g clip-path="url(#clip0_28519_292)">
                                <path
                                    d="M6.34558 9.33997L10.8456 4.83997L10.8456 13.84L6.34558 9.33997Z"
                                    fill="#F8FAFC"></path>
                            </g>
                            <defs>
                                <clipPath id="clip0_28519_292">
                                    <rect
                                        width="18"
                                        height="18"
                                        fill="white"
                                        transform="translate(18.3456 0.339966) rotate(90)"
                                    ></rect>
                                </clipPath>
                            </defs>
                        </svg>
                    </div>
                    <div
                        class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center"
                    >
                        <svg
                            width="19"
                            height="19"
                            viewBox="0 0 19 19"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <g clip-path="url(#clip0_28519_296)">
                                <path
                                    d="M9.34558 12.34L4.84558 7.83997L13.8456 7.83997L9.34558 12.34Z"
                                    fill="#F8FAFC"></path>
                            </g>
                            <defs>
                                <clipPath id="clip0_28519_296">
                                    <rect
                                        width="18"
                                        height="18"
                                        fill="white"
                                        transform="translate(0.345581 0.339966)"
                                    ></rect>
                                </clipPath>
                            </defs>
                        </svg>
                    </div>
                    <div
                        class="bg-[#0A0A0A] rounded-lg border border-stroke flex items-center justify-center"
                    >
                        <svg
                            width="19"
                            height="19"
                            viewBox="0 0 19 19"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M12.3456 9.33997L7.84558 13.84L7.84558 4.83997L12.3456 9.33997Z"
                                fill="#F8FAFC"></path>
                        </svg>
                    </div>
                </div>
            </div>
            <div>
                <p>// food left</p>
            </div>
        </div>
    </div>
</div>

<script>
    class SnakeGame {
        gameBoard: HTMLElement | null;
        snake: { x: number; y: number }[];
        food: { x: number; y: number };
        direction: "up" | "down" | "left" | "right";
        gameStatus: "waitingForStart" | "playing" | "gameOver" | "Won";
        gameInterval: any;

        constructor() {
            this.gameBoard = document.getElementById("snake-game-board");
            this.snake = [{ x: 12, y: 20 }];
            this.food = { x: 5, y: 5 };
            this.direction = "right";
            this.gameStatus = "waitingForStart";
        }

        /**
         * Reset the game
         */
        resetGame() {
            this.snake = [{ x: 10, y: 10 }];
            this.food = { x: 5, y: 5 };
            this.direction = "right";
            this.gameStatus = "waitingForStart";
        }

        /**
         * Set the necesary styles for the header of the snake
         */
        private setStyleToHeaderSnakePart(snakePart: HTMLDivElement) {
            switch (this.direction) {
                case "up":
                    snakePart.style.borderRadius = "40% 40% 0 0";
                    break;
                case "down":
                    snakePart.style.borderRadius = "0 0 40% 40%";
                    break;
                case "left":
                    snakePart.style.borderRadius = "40% 0 0 40%";
                    break;
                case "right":
                    snakePart.style.borderRadius = "0 40% 40% 0";
                    break;
            }
        }

        /**
         * Add styles of a part of the snake's body
         * @param snakePart The snake part to add the styles
         * @param partPosition The position of the part
         */
        private setStyleToBodySnakePart(
            snakePart: HTMLDivElement,
            partPosition: number,
        ) {
            const numberOfFades = 4;

            if (this.snake.length > 0) {
                const currentFadeNumber = Math.abs(
                    this.snake.length - partPosition,
                );
                if (currentFadeNumber > 0 && currentFadeNumber <= numberOfFades)
                    snakePart.classList.add(`fade${currentFadeNumber}`);
            }
        }

        /**
         * Draw the game board
         */
        updateGameBoard() {
            if (!this.gameBoard) return;

            this.gameBoard!.innerHTML = ""; // Clear the previous frame
            // Draw the snake
            for (let i = 0; i < this.snake.length; i++) {
                const snakePart = document.createElement("div");
                snakePart.classList.add("snake-part");

                // Add style to snake header
                if (i === 0 && this.snake.length > 1) {
                    this.setStyleToHeaderSnakePart(snakePart);
                }

                // Add style to snake body
                this.setStyleToBodySnakePart(snakePart, i);

                snakePart.style.left = this.snake[i].x * 10 + "px";
                snakePart.style.top = this.snake[i].y * 10 + "px";
                this.gameBoard.appendChild(snakePart);
            }

            // Draw the food
            const foodElement = document.createElement("div");
            foodElement.id = "game-food";
            foodElement.style.left = this.food.x * 10 + "px";
            foodElement.style.top = this.food.y * 10 + "px";
            this.gameBoard.appendChild(foodElement);
        }

        /**
         * Move the snake
         */
        moveSnake() {
            const newHead = { x: this.snake[0].x, y: this.snake[0].y };

            // Update the position of the new head based on the current direction
            switch (this.direction) {
                case "up":
                    newHead.y -= 1;
                    break;
                case "down":
                    newHead.y += 1;
                    break;
                case "left":
                    newHead.x -= 1;
                    break;
                case "right":
                    newHead.x += 1;
                    break;
            }

            this.snake.unshift(newHead); // Add the new head to the front

            // Check if the snake ate the food
            if (newHead.x === this.food.x && newHead.y === this.food.y) {
                // Generetat new food at random position
                this.food = {
                    x: Math.floor(Math.random() * 24),
                    y: Math.floor(Math.random() * 41),
                };
            } else {
                // Snake didn't eat the food, so remove the tail
                this.snake.pop();
            }
        }

        // Check if the game is over
        checkGameOver() {
            const head = this.snake[0];

            //Check the collision with walls
            if (head.x <= 0 || head.y <= 0 || head.x >= 24 || head.y >= 40) {
                clearInterval(this.gameInterval);
                this.gameStatus = "gameOver";
            }

            // Check for collision with itself
            for (let i = 1; i < this.snake.length; i++) {
                if (this.snake[i].x == head.x && this.snake[i].y === head.y) {
                    clearInterval(this.gameInterval);
                    this.gameStatus = "gameOver";
                }
            }
        }

        handleKeyPress(direction: "up" | "down" | "left" | "right") {
            this.direction = direction;
        }

        startGame() {
            this.resetGame();

            this.gameInterval = setInterval(() => {
                this.moveSnake();
                this.checkGameOver();
                this.updateGameBoard();
            }, 200);
        }
    }

    const snakeGame = new SnakeGame();

    const startButton = document.getElementById("start-snake-game");
    startButton?.addEventListener("click", () => {
        snakeGame.startGame();
        startButton.style.display = "none";

        document.addEventListener("keydown", (event) => {
            let moveDirection = "up";
            switch (event.key) {
                case "ArrowUp":
                    moveDirection = "up";
                    break;
                case "ArrowDown":
                    moveDirection = "down";
                    break;
                case "ArrowLeft":
                    moveDirection = "left";
                    break;
                case "ArrowRight":
                    moveDirection = "right";
                    break;
            }

            snakeGame.handleKeyPress(moveDirection as any);
        });
    });
</script>

<style>
    .glass-card {
        position: relative;
        width: 500px;
        height: 470px;
        border-radius: 8px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.37);
        backdrop-filter: blur(100px);
        -webkit-backdrop-filter: blur(100px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        overflow: hidden;
        /* Glass background with gradient fill */
        background: linear-gradient(
                159deg,
                rgba(23, 85, 83, 0.5),
                rgba(67, 217, 173, 0.1)
            ),
            rgba(255, 255, 255, 0.05);
    }

    .corner {
        fill: var(--color-foreground);
        position: absolute;
        width: 10px;
        height: 10px;
        background: rgba(0, 255, 255, 0.2);
        border-radius: 50%;
        box-shadow: 0 0 4px 1px rgba(0, 255, 255, 0.1);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .top-left {
        top: 10px;
        left: 10px;
    }

    .top-right {
        top: 10px;
        right: 10px;
    }

    .bottom-left {
        bottom: 10px;
        left: 10px;
    }

    .bottom-right {
        bottom: 10px;
        right: 10px;
    }
</style>

<style is:global>
    .snake-head {
        border-radius: 40% 40% 0 0;
    }

    .snake-part {
        width: 10px;
        height: 10px;
        background-color: #46ecd599;
        position: absolute;
        filter: blur(0.3px);
    }

    #game-food {
        position: absolute;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        box-shadow: #46ecd5;
        background-color: #46ecd5;
        box-shadow: 0 0 8px 2px #46ecd550;
    }

    .fade4 {
        background-color: #46ecd595;
        opacity: 0.95;
        filter: blur(0.3px);
    }

    .fade3 {
        background-color: #46ecd590;
        opacity: 0.9;
        filter: blur(0.3px);
    }

    .fade2 {
        background-color: #46ecd585;
        opacity: 0.85;
        filter: blur(0.3px);
    }

    .fade1 {
        background-color: #46ecd580;
        opacity: 0.8;
        filter: blur(0.3px);
    }
</style>
